/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.List;
import org.openapitools.model.OperatorSpecificDataContainer;
import org.openapitools.model.PatchItem;
import org.openapitools.model.ProblemDetails;
import org.openapitools.model.SmsfRegistration;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-07-03T14:55:43.761+09:00[Asia/Seoul]")

@Validated
@Api(value = "subscriber-data", description = "the subscriber-data API")
public interface SubscriberDataApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "To modify operator specific data of a UE", nickname = "amfContext3gpp", notes = "", tags={ "Operator-Specific Data Container (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Expected response to a valid request"),
        @ApiResponse(code = 403, message = "modification is rejected", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriber-data/{ueId}/operator-specific-data",
        produces = { "application/problem+json" }, 
        consumes = { "application/json-patch+json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> amfContext3gpp(@ApiParam(value = "UE id",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<PatchItem> patchItem) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Create the SMSF context data of a UE via 3GPP access", nickname = "createSmsfContext3gpp", notes = "", tags={ "SMSF 3GPP Registration (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Upon success, an empty response body shall be returned"),
        @ApiResponse(code = 200, message = "Unexpected error", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriber-data/{ueId}/context-data/smsf-3gpp-access",
        produces = { "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> createSmsfContext3gpp(@ApiParam(value = "UE id",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = ""  )  @Valid @RequestBody SmsfRegistration smsfRegistration) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Create the SMSF context data of a UE via non-3GPP access", nickname = "createSmsfContextNon3gpp", notes = "", tags={ "SMSF Non-3GPP Registration (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Upon success, an empty response body shall be returned"),
        @ApiResponse(code = 200, message = "Unexpected error", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriber-data/{ueId}/context-data/smsf-non-3gpp-access",
        produces = { "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> createSmsfContextNon3gpp(@ApiParam(value = "UE id",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = ""  )  @Valid @RequestBody SmsfRegistration smsfRegistration) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "To remove the SMSF context data of a UE via 3GPP access", nickname = "deleteSmsfContext3gpp", notes = "", tags={ "SMSF 3GPP Registration (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Upon success, an empty response body shall be returned"),
        @ApiResponse(code = 200, message = "Unexpected error", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriber-data/{ueId}/context-data/smsf-3gpp-access",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteSmsfContext3gpp(@ApiParam(value = "UE id",required=true) @PathVariable("ueId") String ueId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "To remove the SMSF context data of a UE via non-3GPP access", nickname = "deleteSmsfContextNon3gpp", notes = "", tags={ "SMSF Non-3GPP Registration (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Upon success, an empty response body shall be returned"),
        @ApiResponse(code = 200, message = "Unexpected error", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriber-data/{ueId}/context-data/smsf-non-3gpp-access",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteSmsfContextNon3gpp(@ApiParam(value = "UE id",required=true) @PathVariable("ueId") String ueId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Retrieves the operator specific data of a UE", nickname = "queryOperSpecData", notes = "", response = OperatorSpecificDataContainer.class, tags={ "Operator-Specific Data Container (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = OperatorSpecificDataContainer.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriber-data/{ueId}/operator-specific-data",
        produces = { "application/json","application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OperatorSpecificDataContainer> queryOperSpecData(@ApiParam(value = "UE id",required=true) @PathVariable("ueId") String ueId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"NumberTypeElements\" : {    \"key\" : 6.02745618307040320615897144307382404804229736328125  },  \"IntegerTypeElements\" : {    \"key\" : 0  },  \"StringTypeElements\" : {    \"key\" : \"StringTypeElements\"  },  \"BooleanTypeElements\" : {    \"key\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Retrieves the SMSF context data of a UE using 3gpp access", nickname = "querySmsfContext3gpp", notes = "", response = SmsfRegistration.class, tags={ "SMSF 3GPP Registration (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = SmsfRegistration.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriber-data/{ueId}/context-data/smsf-3gpp-access",
        produces = { "application/json","application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SmsfRegistration> querySmsfContext3gpp(@ApiParam(value = "UE id",required=true) @PathVariable("ueId") String ueId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{ }");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Retrieves the SMSF context data of a UE using non-3gpp access", nickname = "querySmsfContextNon3gpp", notes = "", response = SmsfRegistration.class, tags={ "SMSF Non-3GPP Registration (Document)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = SmsfRegistration.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriber-data/{ueId}/context-data/smsf-non-3gpp-access",
        produces = { "application/json","application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SmsfRegistration> querySmsfContextNon3gpp(@ApiParam(value = "UE id",required=true) @PathVariable("ueId") String ueId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{ }");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
